/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

import groovy.swing.SwingBuilder
import org.gradle.plugins.signing.Sign

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryURL() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryURL() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUserName() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryURL()) {
                    authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
                }

                snapshotRepository(url: getSnapshotRepositoryURL()) {
                    authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                        url POM_SCM_URL
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        def file = ext."signing.secretKeyRingFile"
        def id = ext."signing.keyId"
        def password = ext."signing.password"

        Console console = System.console()
        if (console != null) {
            console.printf "\n\nWe have to sign some things in this build." +
                    "\n\nPlease enter your signing details.\n\n"

            def _file = console.readLine("PGP Secret Key Ring File (absolute path): ")
            if (!_file.empty)
                file = _file

            def _id = console.readLine("PGP Key Id: ")
            if (!_id.empty)
                id = _id

            def _password = console.readPassword("PGP Private Key Password: ")
            if (!_password.empty)
                password = _password

            console.printf "\nThanks.\n\n"
        } else {
            System.setProperty("java.awt.headless", "false")
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Please enter your signing details', alwaysOnTop: true, locationRelativeTo: null, pack: true, resizable: false, show: true) {
                    vbox {
                        label(text: "PGP Secret Key Ring File (absolute path): ")
                        def fileField = textField file

                        label(text: "PGP Key Id: ")
                        def idField = textField id

                        label(text: "PGP Private Key Password: ")
                        def passwordField = passwordField password

                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            file = fileField.text
                            id = idField.text
                            password = new String(passwordField.password)

                            dispose()
                        })
                    }
                }
            }
        }

        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.password" = password }
    }
}
